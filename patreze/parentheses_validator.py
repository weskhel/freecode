import re


def parentheses_validator(text: str):
    validator = list(filter(lambda x: len(re.findall('\(', text[:x])) < len(re.findall('\)', text[:x])), range(len(text))))
    if validator:
        return False
    else:
        return True


if __name__ == '__main__':
    a
    print(len(list(map(parentheses_validator, set(a)))), 'valids')
    # print(parentheses_validator("()"))
    # print(parentheses_validator("(())"))
    # print(parentheses_validator("()))(("))

assert parentheses_validator("()") is True
assert parentheses_validator("(())") is True
assert parentheses_validator("()))((") is False
